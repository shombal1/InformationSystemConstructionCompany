// <auto-generated />
using System;
using ISCC.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ISCC.Storage.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20241130201346_DomainLogicChanged")]
    partial class DomainLogicChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ISCC.Storage.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("PlannedEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.ProjectPlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("PlannedEndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalActualPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalActualPriceMaterial")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalActualPriceWork")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostPriceMaterial")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostPriceWork")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalLabor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPlans");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.ResourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualPricePerUnitMaterial")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ActualPricePerUnitWork")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CostPricePerUnitMaterial")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CostPricePerUnitWork")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectPlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Surcharge")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalActualPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalActualPriceMaterial")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalActualPriceWork")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostPriceMaterial")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostPriceWork")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPlanId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("PercentageContent")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProjectPlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TotalActualPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalActualPriceMaterial")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalActualPriceWork")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostPriceMaterial")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCostPriceWork")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalLabor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPlanId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.UnitTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.ProjectPlanEntity", b =>
                {
                    b.HasOne("ISCC.Storage.Entities.ProjectEntity", "Project")
                        .WithMany("Plans")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.ResourceEntity", b =>
                {
                    b.HasOne("ISCC.Storage.Entities.ProjectEntity", "Project")
                        .WithMany("Resources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISCC.Storage.Entities.ProjectPlanEntity", "ProjectPlan")
                        .WithMany("Resources")
                        .HasForeignKey("ProjectPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISCC.Storage.Entities.UnitTypeEntity", "UnitType")
                        .WithMany("Resources")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectPlan");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.TaskEntity", b =>
                {
                    b.HasOne("ISCC.Storage.Entities.ProjectPlanEntity", "ProjectPlan")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectPlan");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.ProjectEntity", b =>
                {
                    b.Navigation("Plans");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.ProjectPlanEntity", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ISCC.Storage.Entities.UnitTypeEntity", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
